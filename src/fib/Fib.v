(* --- GENERATED BY ACT --- *)

Require Import Coq.ZArith.ZArith.
Require Import ActLib.ActLib.
Require Coq.Strings.String.

Module Str := Coq.Strings.String.
Open Scope Z_scope.

Record State : Set := state
{ curr : Z
; prev : Z
}.


Definition next0 (STATE : State)  :=
state (((curr STATE) + (prev STATE))) ((curr STATE))
.


Inductive next0_ret (STATE : State)  : Z -> Prop :=
| next0_ret_intro :
     ((0 <= ((curr STATE) + (prev STATE))) /\ (((curr STATE) + (prev STATE)) <= (UINT_MAX 256)))
  -> ((0 <= (prev STATE)) /\ ((prev STATE) <= (UINT_MAX 256)))
  -> ((0 <= (curr STATE)) /\ ((curr STATE) <= (UINT_MAX 256)))
  -> next0_ret STATE  ((curr STATE) + (prev STATE))

.


Definition Fib0  :=
state (1) (0)
.


Inductive reachable  : State -> State -> Prop :=
| Fib0_base : 
     reachable (Fib0 ) (Fib0 )

| next0_step : forall (BASE STATE : State),
     reachable BASE STATE
  -> ((0 <= ((curr STATE) + (prev STATE))) /\ (((curr STATE) + (prev STATE)) <= (UINT_MAX 256)))
  -> ((0 <= (prev STATE)) /\ ((prev STATE) <= (UINT_MAX 256)))
  -> ((0 <= (curr STATE)) /\ ((curr STATE) <= (UINT_MAX 256)))
  -> reachable BASE (next0 STATE )

.
